====================
Glamor 异步渲染模型
====================

---------
Overview
---------

Cocoa 是一个多线程程序，除了由 libuv 启动的线程池外，Cocoa 中最为重要的线程可能就是
*渲染线程（Rendering Thread）* 了。
渲染线程负责了所有图形资源的获取、管理和释放，并实现了一系列异步渲染 API 和信号槽机制。
在 Cocoa 中，一切渲染相关的任务都由渲染线程异步执行，主线程无须等待渲染过程结束，同时，
所有用户输入事件都由渲染线程处理，并以信号量（并非 POSIX 中定义的信号量）的形式通知主线程。

总而言之，渲染线程实现了两个功能，异步渲染 API 和图形资源管理，
接下来我们将从这两方面来介绍渲染线程。

-----------------------------------
异步操作（Asynchronous Operations）
-----------------------------------

^^^^^^^^^^
Concepts
^^^^^^^^^^

我们首先介绍一些概念，在后文中会使用到：

* 操作（Operation）: 指由主线程发起的函数调用，该调用并不会立刻执行，而是被提交到消息队列中，
  在合适的时候会被渲染线程执行。操作的执行结果也会放回消息队列中，在合适的时候被主线程读取。

* 信号（Signal）和槽（Slot）: 操作是由主线程主动发起的函数调用，而信号则是由渲染线程发起的一种通知机制。
  函数对象可以连接（Connect）到一个信号上，这些函数就称为槽。当一个信号被发出（Emit）时，
  所有连接到该信号的槽都会被调用，顺序不作保证，我们仅保证槽会在信号被接受的那个线程上被调用（通常是主线程）。

* RenderHost: 主线程的一方称为 **RenderHost** ，相对应的，渲染线程的一方称为 **RenderClient** 。

^^^^^^^^^^
原生层实现
^^^^^^^^^^

.. note::
    没有 C++ 经验和多线程开发经验的读者可以跳过此部分，不影响后续的阅读。

实现异步 API 的基础是可靠的线程间通讯机制。GLAMOR 使用了 libuv 的 async handle
配合消息队列来实现线程间通讯。这一套机制比较复杂，下图基本阐明了它的工作原理：

.. image:: _static/async_rendering_thread_model.svg

如图所示，渲染线程和主线程都分别有自己的事件循环和消息队列。红色字体标记的是可以引起整个流程的操作，
分别是主线程进行异步函数调用的 ``Invoke`` 函数和渲染线程发出信号的 ``Emit`` 函数。

当 ``Invoke`` 函数被调用时，在主线程上将调用相关的所有信息包装为 ``RenderHostInvocation`` 对象，
并将其推入渲染线程的消息队列，接着立刻通知渲染线程的事件循环。完成这些工作后，``Invoke`` 函数返回。
这是异步函数调用的调用阶段。

在渲染线程中，事件循环负责调度来自主线程的通知，在合适的时候会触发渲染线程上的处理函数 ``OnInvocationFromHost``，
接着该函数从消息队列中取出 ``RenderHostInvocation`` 对象，根据其中传递来的信息调用真正的处理函数，
处理函数完成后，``RenderHostInvocation`` 的状态被更新（存入返回状态和返回值），
通过 ``WakeupHost`` 函数将更新后的对象推入主线程的消息队列（此时 ``RenderHostInvocation`` 被
转换为基类类型 ``RenderClientTransfer``），并立即通知主线程的事件循环。
这是异步函数调用的返回阶段，也称为响应（Response）。

对于信号量，也遵循类似的过程，由 ``Emit`` 函数将有关信号的所有信息包装为 ``RenderClientSignalEmit``
对象，然后同样由 ``WakeupHost`` 函数将该对象推入主线程的消息队列，并立即通知主线程的事件循环。

同样，主线程的事件循环也会在合适的时机调用对应的处理函数 ``OnResponseFromClient``，
该函数将判断从消息队列取出的 ``RenderClientTransfer`` 对象的类型，并分别调用对应的函数来处理。

对于异步函数调用的返回数据，将从 ``RenderClientTransfer`` 中解出数据，转移到 ``RenderHostCallbackInfo``
中，该对象将直接被传递给用户在调用时注册的用于接收返回值的回调函数。

对于信号量，将从 ``RenderClientTransfer`` 中解出数据，转移到 ``RenderHostSlotCallbackInfo`` 中，
该对象将直接被传递给用户注册的槽函数。

^^^^^^^^^^^^^^^^^^^^^^^^^^^^
理解异步函数调用和信号槽
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

在异步函数调用和信号槽这两大异步机制中，有两个主要角色：RenderHost 和 RenderClient，
RenderHost 是对主线程（JavaScript 线程）的抽象，而 RenderClient 则是对渲染线程的抽象。

RenderHost 可以对 RenderClient 发起函数调用，但是该函数调用并不实际在 RenderHost 上执行，
而是在 RenderClient 上执行，这是一种「远程」调用，而 RenderHost 可以等待 RenderClient 执行完毕，
并像普通函数调用那样取得结果。在 JavaScript 中，这表现为该函数调用以 ``Promise`` 对象的形式返回，
用户可以使用 ``await`` 或 ``then`` 来处理返回值。如果函数调用中发生错误，上一小节中提到的 ``RenderClientTransfer``
对象会携带着错误信息一同返回给主线程，在 JavaScript 中表现为 promise 的 reject。

该实例演示了一个最简单的异步函数调用（忽略错误处理）：

.. code-block:: javascript

    // 假设 Adder.add 是一个异步函数调用，它返回两个数相加的结果
    const result = await Adder.add(1, 2);
    std.print(`Result is ${result}\n`);

    // 或者使用 then 来处理：
    Adder.add(1, 2).then((value) => {
        std.print(`Result is ${value}\n`);
    });

有一些异步函数调用没有返回值，在 JavaScript 中表现为它返回一个 ``Promise<void>`` 对象，
这种情况下，该 promise 的 resolve 表示异步函数调用已成功完成。

对于信号量而言，它用于 RenderClient 主动地通知 RenderHost，
在 JavaScript 中表现为回调函数被主动调用。

在 JavaScript 中，信号量是依托于对象存在的，如果一个对象继承自 ``RenderClientObject`` 对象，
则它就可以使用信号槽机制。在这些对象上，都有一个 ``connect`` 和 ``disconnect`` 方法，
前者用于将回调函数（槽）连接到一个特定的信号，后者用于断开连接：

.. code-block:: javascript

    // 创建一个对象，这体现了信号槽机制是依托于对象存在的
    // （仅作为示例，实际 Cocoa 中不存在内建的名为 Emitter 的对象）
    let emitter = new Emitter();

    // 假设 Emitter 对象具有信号量 notice，将一个回调函数连接到这个信号量上
    const connection = emitter.connect('notice', (content) => {
        // 信号量携带一些参数，它们会直接被传递给槽函数，例如这里的 content
        std.print(`Notice: ${content}\n`);
    });

    // 同一个对象的同一个信号量上可以连接多个槽
    emitter.connect('notice', (content) => {
        // 执行一些其它动作
    });

    // 随时可以断开槽的连接
    emitter.disconnect(connection);

.. warning::
    尽管同一个对象上的同一个信号量上可以连接多个槽，但是这些槽函数的调用顺序是没有任何保证的，
    用户不应当假设任何槽函数被调用的顺序。
